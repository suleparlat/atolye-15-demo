version: 2.1
jobs:
  tests:
    working_directory: ~/repo
    docker:
      - image: circleci/node:10.16.3
    steps:
      - checkout
      
      - restore_cache:
         keys:
           - v1-dependencies-{{ checksum "package.json" }}
           - v1-dependencies-

      - save_cache:
         paths:
           - node_modules
         key: v1-dependencies-{{ checksum "package.json" }}

      - run:
          name: Install Dependencies
          command: yarn install
      - restore_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
      - save_cache:
          key: dependency-cache-{{ checksum "package-lock.json" }}
          paths:
            - ./node_modules
      - run:
          name: Lint
          command: yarn lint
      - run:
          name: Format Check
          command: yarn format:check
      - run:
          name: Test
          command: yarn test
      - run:
          name: Coverage Threshold Check
          command: yarn test:cov
      - run:
          name: End to end test
          command: yarn test:e2e
                
  build-publish-deploy-stage:
    description: Build docker image and push to gcr registry
    docker:
      - image: google/cloud-sdk
    environment:
      NAMESPACE=stage
      
    steps:
      - checkout
      
      - setup_remote_docker:
          version: 19.03.14
          
      - gcr/gcr-auth:
          gcloud-service-key: GCLOUD_SERVICE_KEY
          google-compute-zone: GOOGLE_COMPUTE_ZONE
          google-project-id: GOOGLE_PROJECT_ID
          
      - gcr/build-image:
          dockerfile: Dockerfile
          extra_build_args: '--build-arg MODE=dev'
          google-project-id: GOOGLE_PROJECT_ID
          image: suleparlat/atolye-15-demo
          registry-url: gcr.io
          tag: latest
          
      - gcr/push-image:
          google-project-id: GOOGLE_PROJECT_ID
          image: suleparlat/atolye-15-demo
          registry-url: gcr.io
          tag: latest
          
      - run:
          command: |
              gcloud container clusters get-credentials ${CLUSTER_NAME} --zone ${CLUSTER_ZONE}
              kubectl set image deployment ${DEPLOYMENT_NAME} ${CONTAINER_NAME}=gcr.io/${GOOGLE_PROJECT_ID}/suleparlat/atolye-15-demo:latest --namespace="${NAMESPACE}"
          name: Roll out image
          
      - run:
          command: |
                curl --request POST \
                  --url https://api.sendgrid.com/v3/mail/send \
                  --header "Authorization: Bearer "${SEND_GRID_API_TOKEN}"" \
                  --header 'Content-Type: application/json' \
                  --data '{"personalizations": [{"to": [{"email": "suleparlat@gmail.com"}]}],"from": {"email": "suleparlat@gmail.com"},"subject": "Staging Done!","content": [{"type": "text/plain", "value": "The staging pipeline has been done!"}]}'
          name: Send email
          
  build-publish-deploy-production:
    description: Build docker image and push to gcr registry
    docker:
      - image: google/cloud-sdk
     
    environment:
      NAMESPACE=production
     
    steps:
      - checkout
      
      - setup_remote_docker:
          version: 19.03.14
          
      - gcr/gcr-auth:
          gcloud-service-key: GCLOUD_SERVICE_KEY
          google-compute-zone: GOOGLE_COMPUTE_ZONE
          google-project-id: GOOGLE_PROJECT_ID
          
      - gcr/build-image:
          dockerfile: Dockerfile
          extra_build_args: '--build-arg MODE=prod'
          google-project-id: GOOGLE_PROJECT_ID
          image: suleparlat/atolye-15-demo
          registry-url: gcr.io
          tag: latest
          
      - gcr/push-image:
          google-project-id: GOOGLE_PROJECT_ID
          image: suleparlat/atolye-15-demo
          registry-url: gcr.io
          tag: latest

      - run:
          command: |
              gcloud container clusters get-credentials ${CLUSTER_NAME} --zone ${CLUSTER_ZONE}
              kubectl set image deployment ${DEPLOYMENT_NAME} ${CONTAINER_NAME}=gcr.io/${GOOGLE_PROJECT_ID}/suleparlat/atolye-15-demo:latest --namespace="${NAMESPACE}"
          name: Roll out image

      - run:
          command: |
                  curl --request POST \
                    --url https://api.sendgrid.com/v3/mail/send \
                    --header "Authorization: Bearer "${SEND_GRID_API_TOKEN}"" \
                    --header 'Content-Type: application/json' \
                    --data '{"personalizations": [{"to": [{"email": "suleparlat@gmail.com"}]}],"from": {"email": "suleparlat@gmail.com"},"subject": "Application has been deployed to production!","content": [{"type": "text/plain", "value": "The staging pipeline has been done!"}]}'
          name: Send email
          
orbs:
  gcr: circleci/gcp-gcr@0.13.0
  gcp-gke: circleci/gcp-gke@0.1.0
  cloudrun: circleci/gcp-cloud-run@1.0.0
          
workflows:
  version: 2
  test-and-publish-stage:
    jobs:
      - tests
      - build-publish-deploy-stage:
          requires:
            - tests
          filters:
            branches:
              only: develop
      - build-publish-deploy-production:
          requires:
            - tests
          filters:
            branches:
              only: main

